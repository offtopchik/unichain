#!/bin/bash

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_NAME="unichain.sh"

save_and_run_script() {
  echo "–°–æ—Ö—Ä–∞–Ω—è—é —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª ${SCRIPT_NAME}..."
  
  # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç unichain.sh
  cat > $SCRIPT_NAME << 'EOF'
#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN="\033[1;32m"
BLUE="\033[1;34m"
CYAN="\033[1;36m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
MAGENTA="\033[1;35m"
RESET="\033[0m"

# –°–∏–º–≤–æ–ª —Ä–∞–º–∫–∏
BORDER="========================================="

print_header() {
  clear
  echo -e "${CYAN}"
  echo "$BORDER"
  echo "         üöÄ Unichain Node Manager        "
  echo "$BORDER"
  echo -e "${RESET}"
}

loading_animation() {
  local msg=$1
  echo -ne "${YELLOW}${msg}${RESET}"
  for ((i=0; i<3; i++)); do
    echo -ne "."
    sleep 0.5
  done
  echo -ne "\r${RESET}"
}

download_node() {
  print_header
  echo -e "${YELLOW}–ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${RESET}\n"

  echo -e "${BLUE}1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...${RESET}"
  loading_animation "–û–±–Ω–æ–≤–ª—è—é —Å–∏—Å—Ç–µ–º—É"
  sudo apt update -y && sudo apt upgrade -y
  echo -e "${GREEN}–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${RESET}\n"

  echo -e "${BLUE}2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${RESET}"
  loading_animation "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
  sudo apt-get install -y make build-essential unzip lz4 gcc git jq curl
  echo -e "${GREEN}–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${RESET}\n"

  echo -e "${BLUE}3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${RESET}"
  loading_animation "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker"
  sudo apt install -y docker.io
  sudo systemctl start docker
  sudo systemctl enable docker
  echo -e "${GREEN}Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!${RESET}\n"

  echo -e "${BLUE}4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...${RESET}"
  loading_animation "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker Compose"
  sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  echo -e "${GREEN}Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${RESET}\n"

  echo -e "${BLUE}5. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${RESET}"
  loading_animation "–ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
  git clone https://github.com/Uniswap/unichain-node
  cd unichain-node || { echo -e "${RED}–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é unichain-node${RESET}"; return; }
  echo -e "${GREEN}–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω!${RESET}\n"

  echo -e "${BLUE}6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ENV –¥–ª—è Sepolia...${RESET}"
  if [[ -f .env.sepolia ]]; then
    sed -i 's|^OP_NODE_L1_ETH_RPC=.*$|OP_NODE_L1_ETH_RPC=https://ethereum-sepolia-rpc.publicnode.com|' .env.sepolia
    sed -i 's|^OP_NODE_L1_BEACON=.*$|OP_NODE_L1_BEACON=https://ethereum-sepolia-beacon-api.publicnode.com|' .env.sepolia
    echo -e "${GREEN}ENV —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω!${RESET}\n"
  else
    echo -e "${RED}–û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env.sepolia –Ω–µ –Ω–∞–π–¥–µ–Ω.${RESET}\n"
    return
  fi

  echo -e "${BLUE}7. –ó–∞–ø—É—Å–∫ Docker Compose...${RESET}"
  loading_animation "–ó–∞–ø—É—Å–∫–∞—é Docker Compose"
  sudo docker-compose up -d
  echo -e "${GREEN}\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${RESET}"
}

restart_node() {
  print_header
  echo -e "${YELLOW}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–¥—ã...${RESET}"
  local HOMEDIR="$HOME/unichain-node"
  sudo docker-compose -f "${HOMEDIR}/docker-compose.yml" down
  sudo docker-compose -f "${HOMEDIR}/docker-compose.yml" up -d
  echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!${RESET}"
}

check_node() {
  print_header
  echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã...${RESET}"
  local response
  response=$(curl -s -d '{"id":1,"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false]}' \
    -H "Content-Type: application/json" http://localhost:8545)

  if [[ -z "$response" ]]; then
    echo -e "${RED}–ù–æ–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.${RESET}"
  else
    echo -e "${GREEN}–û—Ç–≤–µ—Ç –æ—Ç –Ω–æ–¥—ã:${RESET} $response"
  fi
}

check_logs_op_node() {
  print_header
  echo -e "${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ OP Node –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...${RESET}"
  sudo docker logs --since 24h unichain-node-op-node-1
}

check_logs_unichain() {
  print_header
  echo -e "${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Unichain Execution Client –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...${RESET}"
  sudo docker logs --since 24h unichain-node-execution-client-1
}

stop_node() {
  print_header
  echo -e "${YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã...${RESET}"
  local HOMEDIR="$HOME/unichain-node"
  sudo docker-compose -f "${HOMEDIR}/docker-compose.yml" down
  echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.${RESET}"
}

display_private_key() {
  print_header
  local nodekey_path="$HOME/unichain-node/geth-data/geth/nodekey"
  if [[ -f "$nodekey_path" ]]; then
    echo -e "${CYAN}–í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:${RESET}"
    cat "$nodekey_path"
  else
    echo -e "${RED}–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.${RESET}"
  fi
}

edit_private_key() {
  print_header
  local nodekey_path="$HOME/unichain-node/geth-data/geth/nodekey"
  if [[ -f "$nodekey_path" ]]; then
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:${RESET}"
    read -r new_key
    echo "$new_key" > "$nodekey_path"
    echo -e "${GREEN}–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω!${RESET}"
  else
    echo -e "${RED}–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.${RESET}"
  fi
}

exit_from_script() {
  echo -e "${GREEN}–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞.${RESET}"
  exit 0
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
while true; do
  print_header
  echo -e "${CYAN}–ú–µ–Ω—é:${RESET}"
  echo -e "1. üöÄ ${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${RESET}"
  echo -e "2. üîÑ ${YELLOW}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É${RESET}"
  echo -e "3. ‚úÖ ${CYAN}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–¥—É${RESET}"
  echo -e "4. üìú ${BLUE}–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ Unichain (OP) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞${RESET}"
  echo -e "5. üìú ${BLUE}–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ Unichain Execution Client –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞${RESET}"
  echo -e "6. üõë ${RED}–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${RESET}"
  echo -e "7. üîë ${CYAN}–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á${RESET}"
  echo -e "8. ‚úèÔ∏è ${YELLOW}–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á${RESET}"
  echo -e "9. ‚ùå ${RED}–í—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞${RESET}\n"

  read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: " choice

  case $choice in
    1) download_node ;;
    2) restart_node ;;
    3) check_node ;;
    4) check_logs_op_node ;;
    5) check_logs_unichain ;;
    6) stop_node ;;
    7) display_private_key ;;
    8) edit_private_key ;;
    9) exit_from_script ;;
    *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${RESET}" ;;
  esac
done
EOF

  # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
  chmod +x $SCRIPT_NAME
  echo "–°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ ${SCRIPT_NAME} –∏ —Å–¥–µ–ª–∞–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º."

  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é
  echo "–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é..."
  bash $SCRIPT_NAME
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
save_and_run_script
